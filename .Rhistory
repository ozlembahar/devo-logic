knitr::opts_chunk$set(echo = TRUE)
#Quality check on sequencing reads via Rqc package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rqc")
require(Rqc)
#Use fastq files from ShortRead package and read them
folder = system.file(package="ShortRead", "extdata/E-MTAB-1147")
#Feed fastq.qz files in "folder" to quality check function
qcRes=rqc(path = folder, pattern = ".fastq.gz", openBrowser=FALSE)
rqcCycleQualityBoxPlot(qcRes)
rqcCycleBaseCallsLinePlot(qcRes)
rqcReadFrequencyPlot(qcRes)
install.packages("fastqcr")
library(fastqcr)
# install the FASTQC java tool
fastqc_install()
# call FASTQC and record the resulting statistics
# in fastqc_results folder
fastqc(fq.dir = folder,qc.dir = "fastqc_results")
# view the report rendered by R functions
qc_report(qc.path="fastqc_results", result.file="reportFile", preview = TRUE)
# read QC results to R for one fastq file
qc <- qc_read("fastqc_results/ERR127302_1_subset_fastqc.zip")
# make plots, example "Per base sequence quality plot"
qc_plot(qc, "Per base sequence quality")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QuasR")
library(QuasR)
# obtain a list of fastq file paths
fastqFiles <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
c("ERR127302_1_subset.fastq.gz",
"ERR127302_2_subset.fastq.gz")
)
# defined processed fastq file names
outfiles <- paste(tempfile(pattern=c("processed_1_", "processed_2_")),".fastq",sep="")
# process fastq files
# remove reads that have more than 1 N, (nBases)
# trim 3 bases from the end of the reads (truncateEndBases)
# Remove ACCCGGGA pattern if it occurs at the start (Lpattern)
# remove reads shorter than 40 base-pairs (minLength)
preprocessReads(fastqFiles, outfiles,
nBases=1,
truncateEndBases=3,
Lpattern="ACCCGGGA",
minLength=40)
require(ShortRead)
# obtain a list of fastq file paths
fastqFile <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
"ERR127302_1_subset.fastq.gz")
# read fastq file
fq = readFastq(fastqFile)
# get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
# get number of bases per read that have quality score below 20
qcount = rowSums( qPerBase <= 20)
# Number of reads where all PerBase scores >= 20
fq[qcount == 0]
View(fq)
writeFastq(fq[qcount == 0],
paste(fastqFile, "Qfiltered", sep = "_"))
f <- FastqStreamer(fastqFile, readerBlockSize = 1000)
while (length(fq <- yield(f))) {
#remove reads where all quality scores are less than 20
#get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
#get number of bases per read that have Q score < 20
qcount = rowSums( qPerBase <= 20)
#write fastq file with mode="a", so every new block
# is written out to the same file
writeFastq(fq[qcount == 0],
paste(fastqFile, "Qfiltered", sep="_"),
mode="a")
}
knitr::opts_chunk$set(echo = TRUE)
#Quality check on sequencing reads via Rqc package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rqc")
require(Rqc)
#Use fastq files from ShortRead package and read them
folder = system.file(package="ShortRead", "extdata/E-MTAB-1147")
#Feed fastq.qz files in "folder" to quality check function
qcRes=rqc(path = folder, pattern = ".fastq.gz", openBrowser=FALSE)
rqcCycleQualityBoxPlot(qcRes)
rqcCycleBaseCallsLinePlot(qcRes)
rqcReadFrequencyPlot(qcRes)
install.packages("fastqcr")
library(fastqcr)
# install the FASTQC java tool
fastqc_install()
# call FASTQC and record the resulting statistics
# in fastqc_results folder
fastqc(fq.dir = folder,qc.dir = "fastqc_results")
# view the report rendered by R functions
qc_report(qc.path="fastqc_results", result.file="reportFile", preview = TRUE)
# read QC results to R for one fastq file
qc <- qc_read("fastqc_results/ERR127302_1_subset_fastqc.zip")
# make plots, example "Per base sequence quality plot"
qc_plot(qc, "Per base sequence quality")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QuasR")
library(QuasR)
# obtain a list of fastq file paths
fastqFiles <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
c("ERR127302_1_subset.fastq.gz",
"ERR127302_2_subset.fastq.gz")
)
# defined processed fastq file names
outfiles <- paste(tempfile(pattern=c("processed_1_", "processed_2_")),".fastq",sep="")
# process fastq files
# remove reads that have more than 1 N, (nBases)
# trim 3 bases from the end of the reads (truncateEndBases)
# Remove ACCCGGGA pattern if it occurs at the start (Lpattern)
# remove reads shorter than 40 base-pairs (minLength)
preprocessReads(fastqFiles, outfiles,
nBases=1,
truncateEndBases=3,
Lpattern="ACCCGGGA",
minLength=40)
require(ShortRead)
# obtain a list of fastq file paths
fastqFile <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
"ERR127302_1_subset.fastq.gz")
# read fastq file
fq = readFastq(fastqFile)
# get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
# get number of bases per read that have quality score below 20
qcount = rowSums( qPerBase <= 20)
# Number of reads where all PerBase scores >= 20
fq[qcount == 0]
writeFastq(fq[qcount == 0],
paste(fastqFile, "Qfiltered", sep = "_"))
knitr::opts_chunk$set(echo = TRUE)
#Quality check on sequencing reads via Rqc package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rqc")
#Use fastq files from ShortRead package and read them
folder = system.file(package="ShortRead", "extdata/E-MTAB-1147")
#Feed fastq.qz files in "folder" to quality check function
qcRes=rqc(path = folder, pattern = ".fastq.gz", openBrowser=FALSE)
require(Rqc)
#Use fastq files from ShortRead package and read them
folder = system.file(package="ShortRead", "extdata/E-MTAB-1147")
#Feed fastq.qz files in "folder" to quality check function
qcRes=rqc(path = folder, pattern = ".fastq.gz", openBrowser=FALSE)
rqcCycleQualityBoxPlot(qcRes)
rqcCycleBaseCallsLinePlot(qcRes)
rqcReadFrequencyPlot(qcRes)
install.packages("fastqcr")
library(fastqcr)
# install the FASTQC java tool
fastqc_install()
# read QC results to R for one fastq file
qc <- qc_read("fastqc_results/ERR127302_1_subset_fastqc.zip")
# make plots, example "Per base sequence quality plot"
qc_plot(qc, "Per base sequence quality")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QuasR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("QuasR")
install.packages("RcppArmadillo")
library(QuasR)
require(RcppArmadillo)
# obtain a list of fastq file paths
fastqFiles <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
c("ERR127302_1_subset.fastq.gz",
"ERR127302_2_subset.fastq.gz")
)
# defined processed fastq file names
outfiles <- paste(tempfile(pattern=c("processed_1_", "processed_2_")),".fastq",sep="")
# process fastq files
# remove reads that have more than 1 N, (nBases)
# trim 3 bases from the end of the reads (truncateEndBases)
# Remove ACCCGGGA pattern if it occurs at the start (Lpattern)
# remove reads shorter than 40 base-pairs (minLength)
preprocessReads(fastqFiles, outfiles,
nBases=1,
truncateEndBases=3,
Lpattern="ACCCGGGA",
minLength=40)
require(ShortRead)
# obtain a list of fastq file paths
fastqFile <- system.file(package="ShortRead",
"extdata/E-MTAB-1147",
"ERR127302_1_subset.fastq.gz")
# read fastq file
fq = readFastq(fastqFile)
# get quality scores per base as a matrix
qPerBase = as(quality(fq), "matrix")
# get number of bases per read that have quality score below 20
qcount = rowSums( qPerBase <= 20)
# Number of reads where all PerBase scores >= 20
fq[qcount == 0]
writeFastq(fq[qcount == 0], paste(fastqFile, "Qfiltered", sep = "_"))
# install from bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dorothea")
y
Yes
y
yes
> if (!requireNamespace("BiocManager", quietly=TRUE)) + install.packages("BiocManager")
> BiocManager::install("mixtools")
> BiocManager::install("bcellViper")
> BiocManager::install("viper")
if (!requireNamespace("BiocManager", quietly=TRUE)) + install.packages("BiocManager")
BiocManager::install("mixtools")
data(bcellViper, package="bcellViper")
adjfile <- system.file("aracne", "bcellaracne.adj", package = "bcellViper")
regul <- aracne2regulon(adjfile, dset, verbose = FALSE)
library(viper)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("viper")
require(viper)
data(bcellViper, package="bcellViper")
data(bcellViper, package="bcellViper")
adjfile <- system.file("aracne", "bcellaracne.adj", package = "bcellViper")
regul <- aracne2regulon(adjfile, dset, verbose = FALSE)
print(regul)
View(dset)
View(regul)
signature <- rowTtest(dset, "description", c("CB", "CC"), "N")
View(signature)
Number.nodes.egfr = 59
Number.edges.egfr = 221
Egfr <- data.frame(Number.nodes.egfr, Number.edges.egfr)
View(Egfr)
Number.nodes.dpp = 52
Number.edges.dpp = 145
Egfr <- data.frame(Number.nodes.dpp, Number.edges.dpp)
Number.nodes.egfr = 59
Number.edges.egfr = 221
Egfr <- data.frame(Number.nodes.egfr, Number.edges.egfr)
Number.nodes.dpp = 52
Number.edges.dpp = 145
Dpp <- data.frame(Number.nodes.dpp, Number.edges.dpp)
Number.nodes.hh = 53
Number.edges.hh = 160
Hh <- data.frame(Number.nodes.hh, Number.edges.hh)
Number.nodes.egfr = 59
Number.edges.egfr = 221
Egfr <- data.frame(Number.nodes.egfr, Number.edges.egfr)
Number.nodes.dpp = 52
Number.edges.dpp = 145
Dpp <- data.frame(Number.nodes.dpp, Number.edges.dpp)
Number.nodes.hh = 53
Number.edges.hh = 160
Hh <- data.frame(Number.nodes.hh, Number.edges.hh)
Number.nodes.notch = 53
Number.edges.notch = 141
Notch <- data.frame(Number.nodes.notch, Number.edges.notch)
Number.nodes.wg = 56
Number.edges.wg = 161
Wg <- data.frame(Number.nodes.wg, Number.edges.wg)
Number.nodes.all = 105
Number.edges.all = 736
All <- data.frame(Number.nodes.all, Number.edges.all)
View(All)
Number.nodes = 59
Number.edges = 221
Egfr <- data.frame(Number.nodes, Number.edges)
Number.nodes = 52
Number.edges = 145
Dpp <- data.frame(Number.nodes, Number.edges)
Number.nodes = 53
Number.edges = 160
Hh <- data.frame(Number.nodes, Number.edges)
Number.nodes = 53
Number.edges = 141
Notch <- data.frame(Number.nodes, Number.edges)
Number.nodes = 56
Number.edges = 161
Wg <- data.frame(Number.nodes, Number.edges)
Number.nodes = 105
Number.edges = 736
All <- data.frame(Number.nodes, Number.edges)
ggplot(All, Dpp, Egfr, Hh, Notch, Wg, x= "Number.nodes", y= "Number.edges")
require(ggplot2)
ggplot(All, Dpp, Egfr, Hh, Notch, Wg, x= "Number.nodes", y= "Number.edges")
gplot(All, Dpp, Egfr, Hh, Notch, Wg, x= "Number.nodes", y= "Number.edges")+
aes(x= "Number.nodes", y= "Number.edges")
ggplot(All, Dpp, Egfr, Hh, Notch, Wg, x= "Number.nodes", y= "Number.edges")+
aes(x= "Number.nodes", y= "Number.edges")
View(Notch)
View(Notch)
data.stats <- data.frame(Egfr, Dpp, Hh, Notch, Wg, All)
View(data.stats)
View(Dpp)
All <- data.frame(Number.nodes, Number.edges, row.names = "All")
View(All)
Number.nodes = 59
Number.edges = 221
Egfr <- data.frame(Number.nodes, Number.edges, row.names = "Egfr")
Number.nodes = 52
Number.edges = 145
Dpp <- data.frame(Number.nodes, Number.edges, row.names = "Dpp")
Number.nodes = 53
Number.edges = 160
Hh <- data.frame(Number.nodes, Number.edges, row.names = "Hh")
Number.nodes = 53
Number.edges = 141
Notch <- data.frame(Number.nodes, Number.edges, row.names = "Notch")
Number.nodes = 56
Number.edges = 161
Wg <- data.frame(Number.nodes, Number.edges, row.names = "Wg")
Number.nodes = 105
Number.edges = 736
All <- data.frame(Number.nodes, Number.edges, row.names = "All")
data.stats <- data.frame(Egfr, Dpp, Hh, Notch, Wg, All, row.names = "Number.nodes", "Number.nodes")
View(data.stats)
data.stats <- data.frame(Egfr, Dpp, Hh, Notch, Wg, All)
View(All)
data.stats <- inner_join(Egfr, Dpp, Hh, Notch, Wg, All)
require(dplyr)
View(Egfr)
View(Egfr)
View(All)
DF <-
Egfr %>%
full_join(Dpp)%>%
full_join(Hh)%>%
full_join(Wg)%>%
DF <-
Egfr %>%
full_join(Dpp)%>%
full_join(Hh)%>%
full_join(Wg)%>%
full_join(Notch)%>%
full_join(All)
DF <- Egfr %>% full_join(Dpp)%>% full_join(Hh)%>% full_join(Wg)%>% full_join(Notch)%>%full_join(All)
View(DF)
View(DF)
View(DF)
row.names(DF)=c("Egfr", "Dpp", "Hh", "Wg", "Notch", "All")
View(DF)
require(ggplot2)
ggplot()+
geom_point(DF, x= "Number.nodes", y= "Number.edges")
ggplot(DF)+
geom_point(aes( x= "Number.nodes", y= "Number.edges"))
require(ggplot2)
ggplot(DF)+
geom_point(aes(Number.nodes, Number.edges)
ggplot(DF)+
geom_point(aes(Number.nodes, Number.edges)+
geom_point(data = DF, colour.by = row.names(DF))
ggplot(DF)+
aes(Number.nodes, Number.edges)+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=umber.edges)+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges)+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row.names(DF)+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row_names(DF)+
geom_point()
row.names(DF)
row.names(DF)
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row_names(DF)+ palette(1:5)
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row_names(DF)+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row_names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color=row_names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()
DF <- Egfr %>% full_join(Dpp)%>% full_join(Hh)%>% full_join(Wg)%>% full_join(Notch)
row.names(DF)=c("Egfr", "Dpp", "Hh", "Wg", "Notch")
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()
ggplot(DF, xlab="Number of nodes", ylab="Number of edges")+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF), xlab="Number of nodes", ylab="Number of edges")+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point(xlab="Number of nodes", ylab="Number of edges")
ggplot(DF)+
aes(x=Number.nodes, xlab="Number of nodes", ylab="Number of edges", y=Number.edges, color= row.names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, xlab="Number of nodes", ylab="Number of edges" color= row.names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, xlab="Number of nodes", ylab="Number of edges", color= row.names(DF))+
geom_point()
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()+
labs(xlab="Number of nodes", ylab="Number of edges")
require(ggplot2)
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()+
labs(color="Signaling pathways")
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()+
labs(color="Signaling pathways", xlab="Number of nodes")
ggplot(DF)+
aes(x=Number.nodes, y=Number.edges, color= row.names(DF))+
geom_point()+
labs(color="Signaling pathways", x="Number of nodes", y="Number of edges")
BiocManager::install("RCy3")
yyyes
y
Yes
cytoscapePing ()
cytoscapeVersionInfo ()
library(RCy3)
cytoscapePing ()
cytoscapeVersionInfo ()
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
library(RCy3)
openSession()
openSession()
#On Mac
DataMatSym <- read.csv(file ="~/Dropbox/NeuroEcto-copyOzlem/NetworkInterference/Network Inference Data and Tables/DatamatSym.csv")
View(DataMatSym)
setwd("~/Documents/Git/DevelopmentalSignaling")
library("devtools");install_github("Sun-lab/CARseq")
install.packages("RcppArmadillo", repos="https://rcppcore.github.io/drat")
library(RcppArmadillo)
library("devtools");install_github("Sun-lab/CARseq")
require(CARseq)
